# frozen_string_literal: true

# Sends out application emails to users.
class UserMailer < ApplicationMailer
  def help_email(current_applicant, subject, body)
    to_email = tg_admin_email

    mail(to: to_email, reply_to: current_applicant.email_with_name,
         subject: subject + " - " + current_applicant.name,
         body: body + "\n\n[This email was generated by the #{ENV['website_name']} System Mailer.]\n\nApplicant: #{ENV['website_url']}/applicants/#{current_applicant.id}")
  end

  def notify_system_admin(system_admin, user)
    setup_email
    @system_admin = system_admin
    @user = user
    @email_to = system_admin.email
    mail(to: system_admin.email,
         subject: "#{user.name} Signed Up",
         reply_to: user.email)
  end

  def status_activated(user)
    setup_email
    @user = user
    @email_to = user.email
    mail(to: user.email,
         subject: "#{user.name}'s Account Activated")
  end

  def annual_submitted(annual)
    setup_email
    @annual = annual
    @email_to = tg_admin_email
    mail(to: @email_to,
         subject: "#{@annual.applicant.name} Submitted Annual Update")
  end

  def update_application(applicant, user)
    setup_email
    @applicant = applicant
    @user = user
    @email_to = applicant.email
    mail(to: applicant.email,
         subject: "Please Update Your Application Information",
         reply_to: user.email)
  end

  def update_preceptor(preceptor, user)
    setup_email
    @preceptor = preceptor
    @user = user
    @email_to = preceptor.email
    mail(to: preceptor.email,
         subject: "Please Update Your Information",
         reply_to: user.email)
  end

  def update_annual(annual, subject, body)
    setup_email
    @annual = annual
    @email_to = annual.applicant.email
    mail(to: annual.applicant.email,
         subject: subject.blank? ? "Please Update Your #{annual.year} Annual Information" : subject,
         body: "Dear #{annual.applicant.name},\n\n" + body + "\n\n#{ENV['website_url']}/annuals/#{annual.id}/edit_me?auth_token=#{annual.applicant.id_and_auth_token}",
         reply_to: annual.user.email)
  end

  def exit_interview(applicant, user)
    setup_email
    @applicant = applicant
    @user = user
    @email_to = applicant.email
    mail(to: applicant.email,
         subject: "Please Complete Your Exit Interview",
         reply_to: user.email)
  end

  def seminars_reminder(applicant, seminars)
    setup_email
    @applicant = applicant
    @seminars = seminars
    @email_to = applicant.email
    mail(to: applicant.email,
         subject: "Upcoming Seminars Reminder",
         reply_to: (defined?(ENV['tg_admin_email']) and not ENV['tg_admin_email'].blank?) ? ENV['tg_admin_email'] : nil)
  end

  def notify_preceptor(applicant)
    setup_email
    @applicant = applicant
    @preceptors = [applicant.preferred_preceptor, applicant.preferred_preceptor_two, applicant.preferred_preceptor_three].compact.uniq
    attachments["#{applicant.curriculum_vitae_url.split('/').last}"] = File.read(applicant.curriculum_vitae.path.to_s) if File.exist?(applicant.curriculum_vitae.path.to_s)
    @email_to = @preceptors.collect(&:email).join(', ')
    mail(to: @preceptors.collect{|p| "#{p.name} <#{p.email}>"}.join(", "),
         cc: (defined?(ENV['tg_admin_email']) and not ENV['tg_admin_email'].blank?) ? ENV['tg_admin_email'] : nil,
         subject: "ACTION REQUIRED: You have been named as a potential preceptor for #{applicant.name}.",
         reply_to: applicant.email)
  end
end
